wf := import("@milaboratory/tengo-sdk:workflow")


ll := import("@milaboratory/tengo-sdk:ll")
file := import("@milaboratory/tengo-sdk:file")
exec := import("@milaboratory/tengo-sdk:exec")
maps := import("@milaboratory/tengo-sdk:maps")
assets := import("@milaboratory/tengo-sdk:assets")
render := import("@milaboratory/tengo-sdk:render")
pframes := import("@milaboratory/tengo-sdk:pframes")
llPFrames := import("@milaboratory/tengo-sdk:pframes.ll")

json := import("json")

getPresetTpl := assets.importTemplate(":get-preset")
calculatePfconvParamsTpl := assets.importTemplate(":calculate-pfconv-params")
processTpl := assets.importTemplate(":process")

wf.setPreRun(assets.importTemplate(":prerun"))

wf.body(func(args) {
	inputRef := args.input

	preset := args.preset
	species := args.species

	input := wf.resolve(inputRef)

	getPreset := render.create(getPresetTpl, {
		request: {
			presetName: preset,
			species: species
		}
	})

	presetContent := getPreset.output("preset", 24 * 60 * 60 * 1000)
	specsContent := getPreset.output("presetSpecForBack", 24 * 60 * 60 * 1000)

	calculatePfconvParams := render.create(calculatePfconvParamsTpl, {
		preset: presetContent,
		specs: specsContent
	})
	pfconvParams := calculatePfconvParams.output("params", 24 * 60 * 60 * 1000)

	runMixcr := render.createEphemeral(processTpl, {
		params: {
			preset: preset,
			species: species
		},
		presetContent: specsContent,
		pfconvParams: pfconvParams,
		inputSpec: input.spec,
		inputData: input.data
	})

	exports := {
		qc: {
			spec: runMixcr.output("qc.spec"),
			data: runMixcr.output("qc.data")
		},
		reports: {
			spec: runMixcr.output("reports.spec"),
			data: runMixcr.output("reports.data")
		},
		clones: runMixcr.output("clones")
	}

	outputs := {
		qc: pframes.exportColumnData(runMixcr.output("qc.data")),
		reports: pframes.exportColumnData(runMixcr.output("reports.data")),
		logs: runMixcr.output("logs.data"),
		clones: pframes.exportFrame(runMixcr.output("clones")),
		clns: runMixcr.output("clns.data")
	}

	return {
		outputs: outputs,
		exports: exports
	}
})
