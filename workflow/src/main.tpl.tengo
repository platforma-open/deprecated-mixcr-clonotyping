wf := import("@platforma-sdk/workflow-tengo:workflow")

render := import("@platforma-sdk/workflow-tengo:render")

maps := import("@platforma-sdk/workflow-tengo:maps")
ll := import("@platforma-sdk/workflow-tengo:ll")
assets := import("@platforma-sdk/workflow-tengo:assets")
smart := import("@platforma-sdk/workflow-tengo:smart")
file := import("@platforma-sdk/workflow-tengo:file")
llPFrames := import("@platforma-sdk/workflow-tengo:pframes.ll")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
exec := import("@platforma-sdk/workflow-tengo:exec")
self := import("@platforma-sdk/workflow-tengo:tpl")

json := import("json")

getPresetTpl := assets.importTemplate(":get-preset")
calculatePfconvParamsTpl := assets.importTemplate(":calculate-pfconv-params")
processTpl := assets.importTemplate(":process")


wf.setPreRun(assets.importTemplate(":prerun"))

wf.prepare(func(args){
	return{
		resolvedLibraryInput: wf.resolve(args.inputLibrary, { errIfMissing: false })
	}
})

wf.body(func(args) {
	// (begin) @TODO To be moved to SDK / Model

	fileImports := {}

	importFile := func(importHandle) {
		fromMap := fileImports[importHandle]
		if fromMap == undefined {
			fImport := file.importFile(importHandle)
			fileImports[importHandle] = fImport
			return fImport.file
		} else {
			return fromMap.file
		}
	}

	// (end)

	blockId := wf.blockId().getDataAsJson()

	inputRef := args.input

	preset := args.preset

	// file or json with preset name
	presetResource := undefined

	if preset.type == "file" {
		presetResource = importFile(preset.file)
	} else {
		ll.assert(preset.type == "name", "unexpected preset type")
		// whole json, including type
		presetResource = smart.createJsonResource(preset)
	}

	limitInput := args.limitInput
	inputLibrary := args.resolvedLibraryInput
	libraryFile := args.libraryFile
	isLibraryFileGzipped := args.isLibraryFileGzipped

	library := undefined
	species := undefined
	libraryImportHandle := undefined
	if !is_undefined(inputLibrary) {
		library = inputLibrary.data
		librarySpec := inputLibrary.spec
		species = librarySpec["annotations"]["pl7.app/species"]
	} else if !is_undefined(libraryFile) {
		fImport := file.importFile(libraryFile)
		libraryImportHandle = fImport.handle
		library = fImport.file
		species = args.customSpecies
	} else {
		library = false
		species = args.species
	}

	//lib := inputLibrary.getFutureInputField("data")


	input := wf.resolve(inputRef)

	//ll.print("__THE_LOG__ " +input)

	getPreset := render.create(getPresetTpl, {
		preset: presetResource,
		params: {
			species: species
		}
	})

	presetContent := getPreset.output("preset", 24 * 60 * 60 * 1000)
	specsContent := getPreset.output("presetSpecForBack", 24 * 60 * 60 * 1000)

	calculatePfconvParams := render.create(calculatePfconvParamsTpl, {
		blockId: blockId,
		preset: presetContent,
		specs: specsContent
	})
	pfconvParamsById := calculatePfconvParams.output("paramsById", 24 * 60 * 60 * 1000)
	pfconvParamsByKey := calculatePfconvParams.output("paramsByKey", 24 * 60 * 60 * 1000)
	featureParams := calculatePfconvParams.output("featureParams", 24 * 60 * 60 * 1000)
	clonotypeKeyAxes := calculatePfconvParams.output("clonotypeKeyAxes", 24 * 60 * 60 * 1000)

	runMixcr := render.createEphemeral(processTpl, {
		preset: presetResource,
		presetContent: specsContent,
		params: smart.createJsonResource({
			species: species,
			limitInput: limitInput,
			blockId: blockId,
			presetCommonName: args.presetCommonName,
			isLibraryFileGzipped: isLibraryFileGzipped
		}),
		featureParams: featureParams,
		clonotypeKeyAxes: clonotypeKeyAxes,
		pfconvParamsById: pfconvParamsById,
		pfconvParamsByKey: pfconvParamsByKey,
		library: library,
		inputSpec: input.getFutureInputField("spec"),
		inputData: input.getFutureInputField("data")
	})

	exports := {
		qc: {
			spec: runMixcr.output("qc.spec"),
			data: runMixcr.output("qc.data")
		},
		reports: {
			spec: runMixcr.output("reports.spec"),
			data: runMixcr.output("reports.data")
		},
		clones: runMixcr.output("clones"),
		clns: {
			spec: runMixcr.output("clns.spec"),
			data: runMixcr.output("clns.data")
		}
	}

	outputs := {
		qc: pframes.exportColumnData(runMixcr.output("qc.data")),
		reports: pframes.exportColumnData(runMixcr.output("reports.data")),
		logs: runMixcr.output("logs.data"),
		clones: pframes.exportFrame(runMixcr.output("clones")),
		clns: runMixcr.output("clns.data"),
		fileImports: smart.createMapResource(maps.mapValues(fileImports, func(im) {
			return im.handle
		}))
	}

	if !is_undefined(libraryImportHandle) {
		outputs.libraryImportHandle = libraryImportHandle
	}

	return {
		outputs: outputs,
		exports: exports
	}
})
