ll := import("@platforma-sdk/workflow-tengo:ll")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
self := import("@platforma-sdk/workflow-tengo:tpl")
pcolumn := import("@platforma-sdk/workflow-tengo:pframes.pcolumn")
pConstants := import("@platforma-sdk/workflow-tengo:pframes.constants")

text := import("text")
json := import("json")

utils := import(":utils")

self.defineOutputs("tsv")

mixcrSw := assets.importSoftware("@platforma-open/milaboratories.software-mixcr:low-memory")
ptransformSw := assets.importSoftware("@platforma-open/milaboratories.software-ptransform:main")

self.body(func(inputs) {
	clnsFile := inputs[pConstants.VALUE_FIELD_NAME]

	params := inputs.params
	chains := params.chains
	clonotypeKeyColumns := params.clonotypeKeyColumns
	exportArguments := params.exportArguments

	// Exporting clones from clns file

	mixcrCmdBuilder := exec.builder().
		printErrStreamToStdout().
		env("MI_PROGRESS_PREFIX", progressPrefix).
		software(mixcrSw).
		secret("MI_LICENSE", "MI_LICENSE").
		arg("exportClones").
		arg("--dont-split-files").
		arg("--chains").arg(chains)

	for argGrp in exportArguments {
		for arg in argGrp {
			mixcrCmdBuilder.arg(arg)
		}
	}

	mixcrCmd := mixcrCmdBuilder.
		arg("clones.clns").
		addFile("clones.clns", clnsFile).
		arg("clones.tsv").
		saveFile("clones.tsv").
		run()

	unprocessedTsv := mixcrCmd.output("clones.tsv")

	if is_undefined(clonotypeKeyColumns) {
		return {
			tsv: unprocessedTsv
		}
	} else {
		// Adding clonotypeKey column
		pWorkflow := {
			steps: [ {
				type: "combine_columns_as_json",
				src: clonotypeKeyColumns,
				dst: "clonotypeKey"
			} ]
		}

		aggregateCmd := exec.builder().
			printErrStreamToStdout().
			software(ptransformSw).
			arg("--workflow").arg("wf.json").
			writeFile("wf.json", json.encode(pWorkflow)).
			arg("input.tsv").addFile("input.tsv", inputTsv).
			arg("output.tsv").saveFile("output.tsv").
			run()

		processedTsv := aggregateCmd.getFile("output.tsv")

		return {
			tsv: processedTsv
		}
	}
})
