ll := import("@platforma-sdk/workflow-tengo:ll")
text := import("text")
getFeature := import(":check-feature")


addAdditionalColumnArgs := func(mixcrCmdBuilder, featureParams) {
	assemblingFeature := featureParams.assemblingFeature
	imputed := featureParams.imputed
	featureSpec := getFeature.getProductiveFeature(assemblingFeature, imputed)
	addColumns := true
	if assemblingFeature == "CDR3" {
		addColumns = false
	}

	mixcrCmdBuilder.
		arg("--append-export-clones-field").
		arg("-vHit").
		arg("--append-export-clones-field").
		arg("-dHit").
		arg("--append-export-clones-field").
		arg("-jHit").
		arg("--append-export-clones-field").
		arg("-cHit").
		arg("--append-export-clones-field").
		arg("-nFeature").arg("VRegion").arg("germline").
		arg("--append-export-clones-field").
		arg("-nFeature").arg("DRegion").arg("germline").
		arg("--append-export-clones-field").
		arg("-nFeature").arg("JRegion").arg("germline").
		arg("--append-export-clones-field").
		arg("-isProductive").arg("CDR3").
		arg("--append-export-clones-field").
		arg("-isOOF").arg("CDR3").
		arg("--append-export-clones-field").
		arg("-hasStops").arg("CDR3")

	
	if addColumns {
		if imputed {
			mixcrCmdBuilder.
				arg("--append-export-clones-field").
				arg("-allNFeatures").
				arg("--append-export-clones-field").
				arg("-allAAFeatures").
				arg("--append-export-clones-field").
				arg("-allNFeaturesImputed").
				arg("--append-export-clones-field").
				arg("-allAAFeaturesImputed").
				arg("--append-export-clones-field").
				arg("-nFeature").arg(assemblingFeature).
				arg("--append-export-clones-field").
				arg("-aaFeature").arg(assemblingFeature).
				arg("--append-export-clones-field").
				arg("-nFeatureImputed").arg(assemblingFeature).
				arg("--append-export-clones-field").
				arg("-aaFeatureImputed").arg(assemblingFeature).
				arg("--append-export-clones-field").
				arg("-isProductive").arg("CDR3").
				arg("--append-export-clones-field").
				arg("-isOOF").arg("CDR3").
				arg("--append-export-clones-field").
				arg("-hasStops").arg("CDR3")
		} else {
			mutationVFeature := featureSpec.mutationVFeature
			productiveFeature := featureSpec.productiveFeature
			mixcrCmdBuilder.
				arg("--append-export-clones-field").
				arg("-isProductive").arg(productiveFeature).
				arg("--append-export-clones-field").
				arg("-isOOF").arg(productiveFeature).
				arg("--append-export-clones-field").
				arg("-hasStops").arg(productiveFeature).
				arg("--append-export-clones-field").
				arg("-nMutations").arg(mutationVFeature).
				arg("--append-export-clones-field").
				arg("-aaMutations").arg(mutationVFeature).
				arg("--append-export-clones-field").
				arg("-nMutations").arg("FR4").
				arg("--append-export-clones-field").
				arg("-aaMutations").arg("FR4").
				arg("--append-export-clones-field").
				arg("-nMutationsCount").arg("FR4").
				arg("--append-export-clones-field").
				arg("-aaMutationsCount").arg("FR4").
				arg("--append-export-clones-field").
				arg("-nMutationsRate").arg("FR4").
				arg("--append-export-clones-field").
				arg("-aaMutationsRate").arg("FR4").
				arg("--append-export-clones-field").
				arg("-nMutationsCount").arg(mutationVFeature).
				arg("--append-export-clones-field").
				arg("-aaMutationsCount").arg(mutationVFeature).
				arg("--append-export-clones-field").
				arg("-nMutationsRate").arg(mutationVFeature).
				arg("--append-export-clones-field").
				arg("-aaMutationsRate").arg(mutationVFeature).
				arg("--append-export-clones-field").
				arg("-nFeature").arg(assemblingFeature).
				arg("--append-export-clones-field").
				arg("-aaFeature").arg(assemblingFeature)
		}
	}
	return mixcrCmdBuilder
}

export ll.toStrict({
	addAdditionalColumnArgs: addAdditionalColumnArgs
})
