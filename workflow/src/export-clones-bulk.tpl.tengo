// export clones

ll := import("@platforma-sdk/workflow-tengo:ll")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
self := import("@platforma-sdk/workflow-tengo:tpl")
pcolumn := import("@platforma-sdk/workflow-tengo:pframes.pcolumn")
pConstants := import("@platforma-sdk/workflow-tengo:pframes.constants")

text := import("text")
json := import("json")

utils := import(":utils")

self.defineOutputs("result")

FILE_NAME_PREFIX := "result.clones_"
FILE_NAME_SUFFIX := ".tsv"
FILE_NAME_PREFIX_LEN := len(FILE_NAME_PREFIX)
FILE_NAME_SUFFIX_LEN := len(FILE_NAME_SUFFIX)

self.body(func(inputs) {
	params := inputs.params
	clonotypeKeyAxes := params.clonotypeKeyAxes
	data := self.rawInputs().data.getValue()

	csvMap := pcolumn.resourceMapBuilder(/* key length */ 1)

	for tsvName, tsv in data.inputs() {
		if !text.has_prefix(tsvName, FILE_NAME_PREFIX) || !text.has_suffix(tsvName, FILE_NAME_SUFFIX) {
			ll.panic("unexpected file name: %v", tsvName)
		}
		chain := tsvName[FILE_NAME_PREFIX_LEN:(len(tsvName) - FILE_NAME_SUFFIX_LEN)]
		processedCsv := tsv
		if !is_undefined(clonotypeKeyAxes) {
			processedCsv = utils.addCloneKey(processedCsv, clonotypeKeyAxes)
		}
		csvMap.add([chain], processedCsv)
	}
	csvMap = csvMap.build()

	return {
		result: csvMap
	}
})
