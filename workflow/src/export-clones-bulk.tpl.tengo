// export clones

ll := import("@platforma-sdk/workflow-tengo:ll")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
self := import("@platforma-sdk/workflow-tengo:tpl")
pcolumn := import("@platforma-sdk/workflow-tengo:pframes.pcolumn")
pConstants := import("@platforma-sdk/workflow-tengo:pframes.constants")

text := import("text")
json := import("json")

tableTransformation := import(":table-transformation")

self.defineOutputs("result")

FILE_NAME_PREFIX := "result.clones_"
FILE_NAME_SUFFIX := ".tsv"
FILE_NAME_PREFIX_LEN := len(FILE_NAME_PREFIX)
FILE_NAME_SUFFIX_LEN := len(FILE_NAME_SUFFIX)

self.body(func(inputs) {
	pfconvParams := inputs.pfconvParams
	clonotypeKeyAxes := inputs.clonotypeKeyAxes
	newKey := newKey
	data := self.rawInputs().data.getValue()

	csvMap := pcolumn.resourceMapBuilder(/* key length */ 1)

	for fileName, file in data.inputs() {
		if !text.has_prefix(fileName, FILE_NAME_PREFIX) || !text.has_suffix(fileName, FILE_NAME_SUFFIX) {
			ll.panic("unexpected file name: %v", fileName)
		}
		if newKey {
			newFile := tableTransformation.transform(file, clonotypeKeyAxes)
			chain := fileName[FILE_NAME_PREFIX_LEN:(len(fileName) - FILE_NAME_SUFFIX_LEN)]
			csvMap.add([chain], newFile)
		} esle {
			chain := fileName[FILE_NAME_PREFIX_LEN:(len(fileName) - FILE_NAME_SUFFIX_LEN)]
			csvMap.add([chain], file)
		}
	}
	csvMap = csvMap.build()

	resultData := xsv.importFileMap(csvMap, "tsv", pfconvParams, { dataOnly: true })

	return {
		result: resultData
	}
})
