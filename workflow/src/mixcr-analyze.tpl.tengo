// mixcr analyze

self := import("@platforma-sdk/workflow-tengo:tpl")
smart := import("@platforma-sdk/workflow-tengo:smart")
pConstants := import("@platforma-sdk/workflow-tengo:pframes.constants")
ll := import("@platforma-sdk/workflow-tengo:ll")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets := import("@platforma-sdk/workflow-tengo:assets")
render := import("@platforma-sdk/workflow-tengo:render")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
pcolumn := import("@platforma-sdk/workflow-tengo:pframes.pcolumn")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
mixcr := import(":mixcr")
times := import("times")

json := import("json")

self.defineOutputs("qc", "reports", "clones", "log", "clns")

exportClonesBulkTpl := assets.importTemplate(":export-clones-bulk")
mixcrSw := assets.importSoftware("@platforma-open/milaboratories.software-mixcr:main")
tableTransformation := import(":table-transformation")

progressPrefix := "[==PROGRESS==]"

self.body(func(inputs) {
	inputData := inputs[pConstants.VALUE_FIELD_NAME]

	params := inputs.params
	preset := inputs.preset
	clonotypeKeyAxes := inputs.clonotypeKeyAxes
	species := params.species
	limitInput := params.limitInput
	fileExtension := params.fileExtension
	reports := params.reports
	featureParams := params.featureParams

	presetContent := inputs.presetContent // already in JSON
	pfconvParams := inputs.pfconvParams // already in JSON
	pfconvParamsNewKey := inputs.pfconvParamsNewKey

	if !is_map(presetContent) {
		ll.panic("malformed presetContent %v", presetContent)
	}

	if !is_map(pfconvParams) {
		ll.panic("malformed pfconvParams %v", pfconvParams)
	}

	inputDataMeta := inputData.getDataAsJson()

	hasAssembleContigs := false
	hasAssembleCells := false
	for stage in presetContent.analysisStages {
		if stage == "assembleContigs" {
			hasAssembleContigs = true
		} else if stage == "assembleCells" {
			hasAssembleCells = true
		}
	}

	clnsFileName := "result.clns"
	if hasAssembleContigs {
		clnsFileName = "result.contigs.clns"
	}
	if hasAssembleCells {
		clnsFileName = "result.assembledCells.clns"
	}

	mixcrCmdBuilder := exec.builder().
		printErrStreamToStdout().
		env("MI_PROGRESS_PREFIX", progressPrefix).
		software(mixcrSw).
		secret("MI_LICENSE", "MI_LICENSE").
		arg("analyze")

	mixcr.addAdditionalColumnArgs(mixcrCmdBuilder, featureParams)

	if !is_undefined(species) {
		mixcrCmdBuilder.arg("--species").arg(species)
	}

	if !is_undefined(limitInput) {
		mixcrCmdBuilder.arg("--limit-input").arg(string(limitInput))
	}

	if smart.isResource(preset) /* file */ {
		mixcrCmdBuilder.
			arg("local#input_preset").
			addFile("input_preset.yaml", preset)
	} else {
		ll.assert(!is_undefined(preset.name), "undefined preset name")
		mixcrCmdBuilder.
			arg(preset.name)
	}

	if inputDataMeta.keyLength == 0 {
		inputFile := inputData.inputs()["[]"]
		ll.assert(!is_undefined(inputFile), "unexpected agg group structure")
		inputFileName := "input." + fileExtension
		mixcrCmdBuilder.addFile(inputFileName, inputFile)
		mixcrCmdBuilder.arg(inputFileName)
	} else if inputDataMeta.keyLength == 1 {
		for sKey, inputFile in inputData.inputs() {
			key := json.decode(sKey)
			if len(key) != 1 {
				ll.panic("malformed key: %v", sKey)
			}
			r := key[0]
			if (r[0] != 'R' && r[0] != "I") || (r[1] != '1' && r[1] != '2') || len(r) != 2 {
				ll.panic("malformed read index: %v", r)
			}
			mixcrCmdBuilder.addFile("input_" + r + "." + fileExtension, inputFile)
		}
		mixcrCmdBuilder.arg("input_{{R}}." + fileExtension)
	} else if inputDataMeta.keyLength == 2 {
		for sKey, inputFile in inputData.inputs() {
			key := json.decode(sKey)
			if len(key) != 2 {
				ll.panic("malformed key: %v", sKey)
			}
			lane := key[0]
			r := key[1]
			if (r[0] != 'R' && r[0] != "I") || (r[1] != '1' && r[1] != '2') || len(r) != 2 {
				ll.panic("malformed read index: %v", r)
			}
			if is_undefined(int(lane)) {
				ll.panic("malformed lane: %v", lane)
			}
			mixcrCmdBuilder.addFile("input_L" + lane + "_" + r + "." + fileExtension, inputFile)
		}
		mixcrCmdBuilder.arg("input_L{{n}}_{{R}}." + fileExtension)
	} else {
		ll.panic("too many axes / not supported")
	}

	mixcrCmdBuilder.arg("result")

	mixcrCmdBuilder.saveFile("result.qc.json")
	mixcrCmdBuilder.saveFile(clnsFileName)

	for report in reports {
		mixcrCmdBuilder.saveFile(report.fileJson)
		mixcrCmdBuilder.saveFile(report.fileTxt)
	}

	if hasAssembleCells {
		mixcrCmdBuilder.saveFile("result.clones.tsv")
	} else {
		mixcrCmdBuilder.saveFileSet("clones", "^result\\.clones_[A-Z0-9]+\\.tsv$")
	}

	mixcrCmdBuilder = mixcrCmdBuilder.cache(48 * times.hour)
	mixcrCmd := mixcrCmdBuilder.run()

	// collecting results

	reportsMap := pcolumn.resourceMapBuilder( /* keyLength */ 2 )
	for report in reports {
		reportsMap.add([report.id, "json"], mixcrCmd.getFile(report.fileJson))
		reportsMap.add([report.id, "txt"], mixcrCmd.getFile(report.fileTxt))
	}

	result := {
			qc: mixcrCmd.getFile("result.qc.json"),
			log: mixcrCmd.getStdoutStream(),
			reports: reportsMap.build(),
			clns: mixcrCmd.getFile(clnsFileName),
		}

	// converting clone tables to p columns
<<<<<<< HEAD
	clones := {}
	result := {}
	if hasAssembleCells {
		cloneTable := mixcrCmd.getFile("result.clones.tsv")
		clones = xsv.importFile(cloneTable, "tsv", pfconvParams, { dataOnly: true })
		result.clones = clones
=======
	clonesById := {}
	clonesByKey := {}
	if hasAssembleCells {
		cloneTable := mixcrCmd.getFile("result.clones.tsv")
		// transformedCloneTable := tableTransformation.transform(cloneTable, clonotypeKeyColumns)
		clonesById = xsv.importFile(cloneTable, "tsv", pfconvParams, { dataOnly: true })
>>>>>>> 5bc35d98b1affbd81ce5d6f9bc2859ceb9f0167f
	} else {
		clonesById = render.create(exportClonesBulkTpl, {
			data: mixcrCmd.getFileSet("clones"),
			pfconvParams: pfconvParams,
			clonotypeKeyAxes: clonotypeKeyAxes,
			newKey: false
		}).output("result", 8 * 24 * 60 * 60 * 1000)
<<<<<<< HEAD
		clonesNewKey = render.create(exportClonesTpl, {
			data: mixcrCmd.getFileSet("clones"),
			pfconvParams: pfconvParamsNewKey,
			clonotypeKeyAxes: clonotypeKeyAxes,
			newKey: true
		}).output("result", 8 * 24 * 60 * 60 * 1000)
		result.clones = clones
		result.clonesNewKey = clonesNewKey
=======
	}


	result := {
		qc: mixcrCmd.getFile("result.qc.json"),
		log: mixcrCmd.getStdoutStream(),
		reports: reportsMap.build(),
		clns: mixcrCmd.getFile(clnsFileName),
		clones: clones
	}
>>>>>>> 5bc35d98b1affbd81ce5d6f9bc2859ceb9f0167f

	return result
})
