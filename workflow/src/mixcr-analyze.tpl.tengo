// mixcr analyze

self := import("@platforma-sdk/workflow-tengo:tpl")
pConstants := import("@platforma-sdk/workflow-tengo:pframes.constants")
ll := import("@platforma-sdk/workflow-tengo:ll")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets := import("@platforma-sdk/workflow-tengo:assets")
render := import("@platforma-sdk/workflow-tengo:render")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
mixcr := import(":mixcr")

json := import("json")

self.defineOutputs("qc", "reports", "clones", "log", "clns")

exportClonesTpl := assets.importTemplate(":export-clones")
mixcrSw := assets.importSoftware("@platforma-open/milaboratories.software-mixcr:main")

progressPrefix := "[==PROGRESS==]"

self.body(func(inputs) {
	inputData := inputs[pConstants.VALUE_FIELD_NAME]

	params := inputs.params
	preset := params.preset
	species := params.species
	fileExtension := params.fileExtension
	reports := params.reports

	presetContent := inputs.presetContent // already in JSON
	pfconvParams := inputs.pfconvParams // already in JSON

	if !is_map(presetContent) {
		ll.panic("malformed presetContent %v", presetContent)
	}

	if !is_map(pfconvParams) {
		ll.panic("malformed pfconvParams %v", pfconvParams)
	}

	inputDataMeta := inputData.getDataAsJson()

	hasAssembleContigs := false
	hasAssembleCells := false
	for stage in presetContent.analysisStages {
		if stage == "assembleContigs" {
			hasAssembleContigs = true
		} else if stage == "assembleCells" {
			hasAssembleCells = true
		}
	}

	clnsFileName := "result.clns"
	if hasAssembleContigs {
		clnsFileName = "result.contigs.clns"
	}
	if hasAssembleCells {
		clnsFileName = "result.assembledCells.clns"
	}

	if inputDataMeta.keyLength == 1 {
		mixcrCmdBuilder := exec.builder().
			printErrStreamToStdout().
			env("MI_PROGRESS_PREFIX", progressPrefix).
			software(mixcrSw).
			secret("MI_LICENSE", "MI_LICENSE").
			arg("analyze")

		mixcr.addAdditionalColumnArgs(mixcrCmdBuilder)

		if !is_undefined(species) {
			mixcrCmdBuilder.arg("--species").arg(species)
		}

		mixcrCmdBuilder.arg(preset)

		// The following code is split into two loops to maintain correct file index ordering (R1, R2, ...)

		filesByRIndex := {}
		for sKey, inputFile in inputData.inputs() {
			key := json.decode(sKey)
			r := key[0]
			if (r[0] != 'R' && r[0] != "I") || (r[1] != '1' && r[1] != '2') || len(r) != 2 {
				ll.panic("malformed read index: %v", r)
			}
			filesByRIndex[r] = inputFile
		}

		for rIndex in ["I1", "I2", "R1", "R2"] {
			inputFile := filesByRIndex[rIndex]
			if is_undefined(inputFile) {
				continue
			}
			fileName := "input_" + rIndex + "." + fileExtension
			mixcrCmdBuilder.addFile(fileName, inputFile).
				arg(fileName)
		}

		mixcrCmdBuilder.arg("result")

		mixcrCmdBuilder.saveFile("result.qc.json")
		mixcrCmdBuilder.saveFile(clnsFileName)

		for report in reports {
			mixcrCmdBuilder.saveFile(report.fileJson)
			mixcrCmdBuilder.saveFile(report.fileTxt)
		}

		mixcrCmdBuilder.saveFileSet("clones", "^result\\.clones_[A-Z0-9]+\\.tsv$")

		mixcrCmd := mixcrCmdBuilder.run()

		reportsMap := pframes.pColumnResourceMapDataBuilder( /* keyLength */ 2 )
		for report in reports {
			reportsMap.add([report.id, "json"], mixcrCmd.getFile(report.fileJson))
			reportsMap.add([report.id, "txt"], mixcrCmd.getFile(report.fileTxt))
		}

		// converting clone tables to p columns
		clones := render.create(exportClonesTpl, {
			data: mixcrCmd.getFileSet("clones"),
			pfconvParams: pfconvParams
		}).output("result", 24 * 60 * 60 * 1000)

		result := {
			qc: mixcrCmd.getFile("result.qc.json"),
			log: mixcrCmd.getStdoutStream(),
			reports: reportsMap.build(),
			clns: mixcrCmd.getFile(clnsFileName),
			clones: clones
		}

		return result
	} else {
		ll.panic("not yet supported")
	}
})
