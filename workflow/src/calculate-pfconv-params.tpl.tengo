// calculate-pfconv-params
self := import("@platforma-sdk/workflow-tengo:tpl")
// validation := import("@platforma-sdk/workflow-tengo:validation")

pfconvParamsLib := import(":pfconv_params")

json := import("json")

// self.validateInputs({
// 	"__options__,closed": "",
// 	"request": {
// 		"__options__,closed": "",
// 		"blockId": ["not", validation.resource()],
// 		"specs,omitempty": ["not", validation.resource()]
// 	}
// })

self.defineOutputs("params")

self.body(func(inputs) {

	blockId := inputs.blockId

	// filter function
	filter := func(list, predicate) {
		result := []
		for item in list {
			if predicate(item) {
				result = append(result, item)
			}
		}
		return result
	}

	fieldsToColumns := {
		"-cellGroup": "cellGroup",
		"-topChains": "topChains",
		"-isotype": "isotype",
		"-vHit": "bestVHit",
		"-dHit": "bestDHit",
		"-jHit": "bestJHit",
		"-cHit": "bestCHit"
	}

	// get specs and preset data
	specs := inputs.specs.getDataAsJson()
	preset := inputs.preset.getDataAsJson()

	//if using readCount or umiCount
	columnsList := []
	columnsOrder := []
	if len(specs.umiTags) == 0 {
		columnsList += ["readCount", "readFraction"]
	} else {
		columnsList += ["uniqueMoleculeCount", "uniqueMoleculeFraction"]
	}

	// check if imputed or not and filter columns by fieldsToColumns
	imputed := undefined
	for field in preset.exportClones.fields {
		if field.field == "-allAAFeaturesImputed" {
			imputed = true
		} else if field.field == "-allAAFeatures" {
			imputed = false
		} else if !is_undefined(fieldsToColumns[field.field]) {
			columnsList = append(columnsList, fieldsToColumns[field.field])
		}
	}

	// add columns with sequences
	for feature in specs.coveredFeaturesOnExport {
		if imputed {
			columnsList += ["nSeqImputed"+feature, "minQual"+feature, "aaSeqImputed"+feature]
		} else {
			columnsList += ["nSeq"+feature, "minQual"+feature, "aaSeq"+feature]
		}
	}

	// filter pfconvParams by column name and get a list of fields from it
	pfconvParams := pfconvParamsLib.getColumns(blockId)

	columns := []
	for col in columnsList {
		getColumn := filter(pfconvParams.columns, func(item) { return item.column ==  col})
		columns += getColumn
	}

	// create axes fields
	axes := []
	if len(specs.cellTags) == 0 {
		axes = filter(pfconvParams.axes, func(item) { return item.column == "cloneId" })
	} else {
		axes = pfconvParams.axes
	}

	return {
		params: {
			"axes": axes,
			"columns": columns,
			"naStr": "region_not_covered",
			"storageFormat": "Binary",
			"partitionKeyLength": 0
		}
	}
})
