// process

self := import("@milaboratory/tengo-sdk:tpl")

ll := import("@milaboratory/tengo-sdk:ll")
smart := import("@milaboratory/tengo-sdk:smart")
file := import("@milaboratory/tengo-sdk:file")
llPFrames := import("@milaboratory/tengo-sdk:pframes.ll")

json := import("json")

mixcrAnalyzeTpl := ll.importTemplate(":mixcr-analyze")

self.awaitState("InputsLocked")
self.awaitState("params", "ResourceReady")
self.awaitState("inputSpec", "ResourceReady")

self.body(func(inputs) {
	params := inputs.params
	preset := params.preset
	inputSpec := self.rawInputs().inputSpec.getValue().getDataAsJson()

	presetContent := self.rawInputs().presetContent
	pfconvParams := self.rawInputs().pfconvParams

	if is_undefined(presetContent) {
		ll.panic("no presetContent")
	}

	if is_undefined(pfconvParams) {
		ll.panic("no pfconvParams")
	}

	fileExtension := inputSpec.domain["pl7.app/fileExtension"]

	mixcrResults := llPFrames.aggregate(
			self.rawInputs().inputData, [1], mixcrAnalyzeTpl,
			["qc"],
			false,
			{
				params: smart.createJsonResource({
					preset: preset,
					fileExtension: fileExtension
				}),
				presetContent: presetContent,
				pfconvParams: pfconvParams
			}
		)

	return {
		qc: mixcrResults.output("qc")
	}
})
