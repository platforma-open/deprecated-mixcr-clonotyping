// get preset

self := import("@platforma-sdk/workflow-tengo:tpl")
ll := import("@platforma-sdk/workflow-tengo:ll")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets := import("@platforma-sdk/workflow-tengo:assets")
mixcr := import(":mixcr")

self.validateInputs({
	"__options__,closed": "",
	"request": {
		"__options__,closed": "",
		"presetName": "string",
		"species,omitempty": "string"
	}
})

mixcrSw := assets.importSoftware("@milaboratory/mixcr:main")

self.defineOutputs("preset", "presetSpecForBack")

self.body(func(inputs) {
	presetName := inputs.request.presetName
	species := inputs.request.species

	mixcrExportPresetCmdBuilder := exec.builder().
		software(mixcrSw).
		printErrStreamToStdout().
		secret("MI_LICENSE", "MI_LICENSE").
		arg("exportPreset").
		arg("--preset-name").
		arg(presetName)

	mixcr.addAdditionalColumnArgs(mixcrExportPresetCmdBuilder)

	if !is_undefined(species) {
		mixcrExportPresetCmdBuilder.arg("--species").arg(species)
	}

	mixcrExportPresetCmd := mixcrExportPresetCmdBuilder.arg("preset.json").
		saveFileContent("preset.json").
		saveFile("preset.json").
		run()

	presetContent := mixcrExportPresetCmd.getFileContent("preset.json")

	mixcrForBackCmd := exec.builder().
		software(mixcrSw).
		printErrStreamToStdout().
		arg("presetSpecificationsForBack").
		addFile("preset.yaml", mixcrExportPresetCmd.getFile("preset.json")).
		arg("preset.yaml").
		arg("presetForBack.json").
		saveFileContent("presetForBack.json").
		run()

	presetSpecForBackContent := mixcrForBackCmd.getFileContent("presetForBack.json")

	return {
		preset: presetContent,
		presetSpecForBack: presetSpecForBackContent
	}
})
